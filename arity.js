// Generated by CoffeeScript 1.6.2
(function() {
  var ar, parseFunc,
    __slice = [].slice;

  parseFunc = function(func) {
    var funcName, match, paramStr, _ref;

    _ref = /^function (.*)\((.*)\)/.exec(func), match = _ref[0], funcName = _ref[1], paramStr = _ref[2];
    return [funcName].concat(__slice.call(paramStr.split(/\s*,\s*/)));
  };

  ar = function() {
    var func, funcName, max, min, numParams, paramNames, topArgs, _ref,
      _this = this;

    topArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    min = max = null;
    func = (function() {
      switch (topArgs.length) {
        case 1:
          return topArgs[0];
        case 2:
          min = topArgs[0];
          return topArgs[1];
        case 3:
          min = topArgs[0];
          max = topArgs[1];
          if (max < min) {
            throw new Error("The max parameter must be greater than or equal to the min.");
          }
          return topArgs[2];
        default:
          throw new Error("Invalid number of parameters. Expected 1..3, got " + topArgs.length);
      }
    })();
    if (typeof func !== "function") {
      throw new Error("Invalid parameter. Function required.");
    }
    if ((min != null) && typeof min !== "number" || min < 0 || min % 1 !== 0) {
      throw new Error("Invalid minimum value set. " + ("Expected positive integer, got " + min + "."));
    }
    if ((max != null) && typeof max !== "number" || max < 0 || max % 1 !== 0) {
      throw new Error("Invalid maximum value set. " + ("Expected positive integer, got " + min + "."));
    }
    numParams = func.length;
    _ref = parseFunc(func), funcName = _ref[0], paramNames = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    return function() {
      var args, expected, funcNameStr, paramNameStr;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (min != null) {
        if (max == null) {
          max = args.length;
        }
      } else {
        min = max = func.length;
      }
      if (args.length < min || args.length > max) {
        funcNameStr = paramNameStr = "";
        if (funcName) {
          funcNameStr = " when calling '" + funcName + "'";
        }
        if (paramNames[0]) {
          paramNameStr = " Params: " + (paramNames.join(', ')) + ".";
        }
        expected = (function() {
          switch (false) {
            case !(min === topArgs[0] && max === topArgs[1]):
              return "" + min + ".." + max;
            case min !== topArgs[0]:
              return "" + min + " or more";
            default:
              return args.length;
          }
        })();
        throw new Error(("Wrong number of parameters" + funcNameStr + ". ") + ("Excpected " + expected + ", got " + args.length + "." + paramNameStr));
      }
      return func.apply(_this, args);
    };
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ar;
  } else {
    window.ar = ar;
  }

}).call(this);
