// Generated by CoffeeScript 1.6.2
(function() {
  var ar, checkClass, getClass, nativeClasses, nativeTypes, parseFunc, printable, titleize, type,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  parseFunc = function(func) {
    var funcName, match, paramStr, _ref;

    _ref = /^function (.*)\((.*)\)/.exec(func), match = _ref[0], funcName = _ref[1], paramStr = _ref[2];
    return [funcName].concat(__slice.call(paramStr.split(/\s*,\s*/)));
  };

  getClass = function(arg) {
    if (arg == null) {
      return "null";
    }
    return (/^function (.*)\(/.exec(arg.constructor))[1];
  };

  titleize = function(str) {
    return str[0].toUpperCase() + str.slice(1);
  };

  printable = function(obj) {
    return JSON.stringify(obj).replace(/\{|:|,/g, "$& ").replace(/}/, " }");
  };

  nativeTypes = ["number", "boolean", "string", "function", "object"];

  nativeClasses = (function() {
    var _i, _len, _results;

    _results = [];
    for (_i = 0, _len = nativeTypes.length; _i < _len; _i++) {
      type = nativeTypes[_i];
      _results.push(titleize(type));
    }
    return _results;
  })();

  checkClass = function(template, obj, argIndex) {
    var checkClass_rec, top_obj, top_template;

    top_template = template;
    top_obj = obj;
    return (checkClass_rec = function(template, obj) {
      var key, paramClass, templateClass, _results;

      templateClass = getClass(template);
      paramClass = getClass(obj);
      if (templateClass === "Object" && paramClass === "Object") {
        _results = [];
        for (key in template) {
          if (!(key in obj)) {
            throw new Error(("Invalid parameter. Expected parameter " + argIndex + " to ") + ("match " + (JSON.stringify(template)) + "."));
          }
          _results.push(checkClass_rec(template[key], obj[key], argIndex));
        }
        return _results;
      } else if (paramClass !== template && template !== "*") {
        if (!(__indexOf.call(nativeClasses, paramClass) >= 0 && paramClass === titleize(template))) {
          if (getClass(top_template) === "Object") {
            throw new Error("Invalid parameter. Expected parameter 1 to match " + ("`" + (printable(top_template)) + "` but got `" + (printable(top_obj)) + "`."));
          } else {
            throw new Error(("Invalid parameter. Expected parameter " + argIndex + " to ") + ("be of type '" + (titleize(template)) + "' but got '" + paramClass + "'."));
          }
        }
      }
    })(template, obj);
  };

  ar = function() {
    var classes, func, funcName, index, max, min, paramNames, topArgs, _i, _len, _ref,
      _this = this;

    topArgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    min = max = null;
    classes = null;
    func = topArgs[topArgs.length - 1];
    if (typeof func !== "function") {
      throw new Error("Invalid parameter. Function required.");
    }
    switch (typeof topArgs[0]) {
      case "function":
        null;
        break;
      case "string":
      case "object":
        classes = topArgs.slice(0, -1);
        for (index = _i = 0, _len = classes.length; _i < _len; index = ++_i) {
          type = classes[index];
          if (typeof type !== "string" && getClass(type) !== "Object") {
            throw new Error("Parameter " + index + " is an invalid type.");
          }
        }
        classes = (function() {
          var _j, _len1, _results;

          _results = [];
          for (_j = 0, _len1 = classes.length; _j < _len1; _j++) {
            type = classes[_j];
            if (__indexOf.call(nativeTypes, type) >= 0) {
              _results.push(titleize(type));
            } else {
              _results.push(type);
            }
          }
          return _results;
        })();
        break;
      case "number":
        switch (topArgs.length) {
          case 2:
            min = topArgs[0];
            break;
          case 3:
            min = topArgs[0];
            max = topArgs[1];
            if (max < min) {
              throw new Error("The max parameter must be greater than or equal to the min.");
            }
            break;
          default:
            throw new Error("Invalid number of parameters. Expected 1..3, but got " + topArgs.length);
        }
        break;
      default:
        throw new Error("Invalid parameter. Expected 'number', 'string', or " + "'function' as the first parameter.");
    }
    if ((min != null) && typeof min !== "number" || min < 0 || min % 1 !== 0) {
      throw new Error("Invalid minimum value. " + ("Expected positive integer, but got " + min + "."));
    }
    if ((max != null) && typeof max !== "number" || max < 0 || max % 1 !== 0) {
      throw new Error("Invalid maximum value. " + ("Expected positive integer, but got " + max + "."));
    }
    _ref = parseFunc(func), funcName = _ref[0], paramNames = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    return function() {
      var arg, args, expected, funcNameStr, paramNameStr, _j, _len1;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (min != null) {
        if (max == null) {
          max = args.length;
        }
      } else {
        min = max = func.length;
      }
      if (args.length < min || args.length > max) {
        funcNameStr = paramNameStr = "";
        if (funcName) {
          funcNameStr = " when calling '" + funcName + "'";
        }
        if (paramNames[0]) {
          paramNameStr = " Params: " + (paramNames.join(', ')) + ".";
        }
        expected = (function() {
          switch (false) {
            case !(min === topArgs[0] && max === topArgs[1]):
              return "" + min + ".." + max;
            case min !== topArgs[0]:
              return "" + min + " or more";
            default:
              return func.length;
          }
        })();
        throw new Error(("Wrong number of parameters" + funcNameStr + ". ") + ("Excpected " + expected + ", but got " + args.length + "." + paramNameStr));
      }
      if (classes != null) {
        if (args.length !== classes.length) {
          throw Error(("Wrong number of parameters. Expected " + classes.length + " ") + ("but got " + args.length));
        }
        for (index = _j = 0, _len1 = args.length; _j < _len1; index = ++_j) {
          arg = args[index];
          checkClass(classes[index], arg, index);
        }
      }
      return func.apply(_this, args);
    };
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ar;
  } else {
    window.ar = ar;
  }

}).call(this);
