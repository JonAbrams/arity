// Generated by CoffeeScript 1.6.2
(function() {
  var ar, should,
    __slice = [].slice;

  should = require("should");

  ar = require("../arity");

  describe('ar', function() {
    describe("when just a function is provided", function() {
      it('throws when there are too many parameters', function() {
        return (function() {
          var func;

          func = ar(function() {});
          return func("param1");
        }).should["throw"]();
      });
      it('throw when there are too few parameters', function() {
        return (function() {
          var func;

          func = ar(function(a, b) {});
          return func();
        }).should["throw"]();
      });
      it('mentions the parameters when throwing an error', function() {
        return (function() {
          var func;

          func = ar(function(a, b) {});
          return func();
        }).should["throw"](/.*a, b.*/);
      });
      it('mentions the function\'s name when throwing an error', function() {
        return (function() {
          var func;

          func = ar(function myFunc (a, b) { });
          return func();
        }).should["throw"](/.*myFunc.*/);
      });
      it('throws when a function isn\'t passed in', function() {
        return (function() {
          return ar(1);
        }).should["throw"]();
      });
      return it('runs the function when the right number of parameters are passed in', function() {
        var obj;

        obj = {
          sum: ar(function(a, b) {
            return a + b;
          })
        };
        return obj.sum(2, 3).should.eql(5);
      });
    });
    describe("Minimum value provided", function() {
      it('throws if the min value isn\'t a number', function() {
        return (function() {
          return ar("oops", function(a, b) {
            return a + b;
          });
        }).should["throw"]();
      });
      it('throws if the min value isn\'t a positive number', function() {
        return (function() {
          return ar(-1, function(a, b) {
            return a + b;
          });
        }).should["throw"]();
      });
      it('throws if the min value isn\'t an integer', function() {
        return (function() {
          return ar(1.5, function(a, b) {
            return a + b;
          });
        }).should["throw"]();
      });
      it('throws if fewer than the minimum number of parameters are passed', function() {
        return (function() {
          var func;

          func = ar(3, function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return args.length;
          });
          return func(1, 2);
        }).should["throw"]();
      });
      return it('runs the function when the min number of parameters are passed in', function() {
        var func;

        func = ar(3, function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return args.length;
        });
        return func(1, 2, 3, 4).should.eql(4);
      });
    });
    return describe("Maximum value provided", function() {
      it('throws if the max value isn\'t a number', function() {
        return (function() {
          return ar(1, "oops", function(a, b) {
            return a + b;
          });
        }).should["throw"]();
      });
      it('throws if the max value isn\'t a positive number', function() {
        return (function() {
          return ar(1, -3, function(a, b) {
            return a + b;
          });
        }).should["throw"]();
      });
      it('throws if the max value isn\'t an integer', function() {
        return (function() {
          return ar(1, 3.2, function(a, b) {
            return a + b;
          });
        }).should["throw"]();
      });
      it('throws if the max value is less than the min value', function() {
        return (function() {
          return ar(5, 3, function(a, b) {
            return a + b;
          });
        }).should["throw"]();
      });
      it('throws if more than the maximum number of parameters are passed', function() {
        return (function() {
          var func;

          func = ar(0, 3, function() {
            var args;

            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return args.length;
          });
          func();
          return func(1, 2, 3, 4);
        }).should["throw"]();
      });
      return it('runs the function when the correct number of parameters are passed in', function() {
        var func;

        func = ar(2, 4, function() {
          var args;

          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return args.length;
        });
        return func(1, 2, 3, 4).should.eql(4);
      });
    });
  });

}).call(this);
